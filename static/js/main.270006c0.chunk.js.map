{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/Textform.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","react_default","a","createElement","style","height","alert","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","aria-checked","htmlFor","Textform","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","newText","showAlert","words","split","i","document","getElementById","select","navigator","clipboard","writeText","join","filter","element","defaultProps","About","App","setMode","_useState3","_useState4","setAlert","_useState5","_useState6","theme","setTheme","message","setTimeout","body","changeTheme","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.270006c0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  const capitalize = (word) => {\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  };\r\n  return (\r\n    <div style={{ height: \"50px\" }}>\r\n      {props.alert && (\r\n        <div>\r\n          <div\r\n            className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n            role=\"alert\"\r\n          >\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import { Link } from \"react-router-dom\";\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">\r\n                {props.About}\r\n              </Link>\r\n            </li> */}\r\n            {/* <li class=\"nav-item dropdown\">\r\n              <Link\r\n                className=\"nav-link dropdown-toggle\"\r\n                to=\"/themes\"\r\n                id=\"navbarDropdown\"\r\n                role=\"button\"\r\n                data-bs-toggle=\"dropdown\"\r\n                aria-expanded=\"false\"\r\n              >\r\n                Themes\r\n              </Link>\r\n              <ul class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\r\n                <li>\r\n                  <a className=\"dropdown-item\" href=\"/\">\r\n                    bluish\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"dropdown-item\" href=\"/\">\r\n                    greyish\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"dropdown-item\" href=\"/\">\r\n                    pinkish\r\n                  </a>\r\n                </li>\r\n                <li>\r\n                  <a className=\"dropdown-item\" href=\"/\">\r\n                    reddish\r\n                  </a>\r\n                </li>\r\n              </ul>\r\n            </li> */}\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div\r\n            className={`form-check form-switch text-${\r\n              props.mode === \"light\" ? \"dark\" : \"light\"\r\n            }`}\r\n          >\r\n            <input\r\n              className=\"form-check-input\"\r\n              onClick={props.toggleMode}\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              aria-checked=\"false\"\r\n              id=\"flexSwitchCheckDefault\"\r\n            />\r\n            <label\r\n              className=\"form-check-label\"\r\n              htmlFor=\"flexSwitchCheckDefault\"\r\n            >\r\n              {`${\r\n                props.mode === \"light\" ? \"Enable DarkMode\" : \"Disable DarkMode\"\r\n              }`}\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  About: PropTypes.string,\r\n};\r\nNavbar.defaultProps = { title: \"set title here\", About: \"About Text here\" };\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Textform(props) {\r\n  const handleUpperClick = () => {\r\n    // console.log(\"UpperCase was Clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\" Converted to UpperCase!!\", \"success\");\r\n  };\r\n\r\n  const handleLowerClick = () => {\r\n    // console.log(\"LowerrCase was Clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\" Converted to LowerCase!!\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    // console.log(\"Clear was Clicked\" + text);\r\n    setText(\"\");\r\n    props.showAlert(\" Textbox Cleared!!\", \"success\");\r\n  };\r\n\r\n  const handleFirstCapitalClick = () => {\r\n    // console.log(\"First Capital was Clicked\" + text);\r\n    let words = text.split(\" \");\r\n    let newText = \"\";\r\n    for (let i = 0; i < words.length; i++) {\r\n      newText += words[i][0].toUpperCase() + words[i].slice(1) + \" \";\r\n    }\r\n    setText(newText);\r\n  };\r\n\r\n  const handleCopyToClipboard = () => {\r\n    // console.log(\"Copy To Clipboard Clicked\" + text);\r\n    let newText = document.getElementById(\"myBox\");\r\n    newText.select();\r\n    navigator.clipboard.writeText(newText.value);\r\n    props.showAlert(\" Copied to Clipboard!!\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    // console.log(\"To Remove Extra Spaces\" + text);\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\" Extra spaces removed!!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"OnChange\");\r\n    setText(event.target.value);\r\n  };\r\n\r\n  const [text, setText] = useState(\"\");\r\n  // text='new Text' -->wrong way to change the text\r\n  // setText('new Text') -->correct way to change the text\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h1 className=\"mb-4\">{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            style={{\r\n              backgroundColor:\r\n                props.mode === \"dark\" ? \"rgb(36,74,104)\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"#042743\",\r\n            }}\r\n            id=\"myBox\"\r\n            rows=\"10\"\r\n          ></textarea>\r\n        </div>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleUpperClick}\r\n        >\r\n          To Uppercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleLowerClick}\r\n        >\r\n          To Lowercase\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleFirstCapitalClick}\r\n        >\r\n          To Capitalize\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleCopyToClipboard}\r\n        >\r\n          Copy To Clipboard\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          Remove Extra Spaces\r\n        </button>\r\n        <button\r\n          disabled={text.length === 0}\r\n          className=\"btn btn-primary mx-1 my-1\"\r\n          onClick={handleClearClick}\r\n        >\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n\r\n      <div\r\n        className=\"container my-3\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}\r\n      >\r\n        <h2>Your Text Summary</h2>\r\n        <p>\r\n          {\r\n            text.split(\" \").filter((element) => {\r\n              return element.length !== 0;\r\n            }).length\r\n          }{\" \"}\r\n          words and {text.length} characters\r\n        </p>\r\n        <p>\r\n          {0.08 *\r\n            text.split(\" \").filter((element) => {\r\n              return element.length !== 0;\r\n            }).length}{\" \"}\r\n          minutes to read the text\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length > 0 ? text : \"Nothing To Preview\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Alert from \"./components/Alert\";\n// import About from \"./components/About\";\nimport Navbar from \"./components/Navbar\";\nimport Textform from \"./components/Textform\";\n// import { BrowserRouter, Route, Routes } from \"react-router-dom\";\nfunction App() {\n  //whether dark mode is enabled or not\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const [theme, setTheme] = useState(\"light\");\n  const toggleMode = () => {\n    if (mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\" Light mode has been enabled!!\", \"success\");\n      // document.title = \"TextUtils - LightMode \";\n    } else {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\" Dark mode has been enabled!!\", \"success\");\n      // document.title = \"TextUtils - DarkMode \";\n    }\n  };\n\n  const changeTheme = (theme) => {\n    setTheme({ theme: theme });\n  };\n\n  const showAlert = (message, type) => {\n    setAlert({ msg: message, type: type });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  return (\n    <>\n      {/* <BrowserRouter> */}\n      <Navbar\n        title=\"TextUtils\"\n        mode={mode}\n        toggleMode={toggleMode}\n        theme={theme}\n        changeTheme={changeTheme}\n      />\n      <Alert alert={alert} />\n\n      <div className=\"container my-3\">\n        {/* <Routes> */}\n        {/* <Route exact path=\"/about\" element={<About mode={mode} />} /> */}\n        {/* <Route\n              exact\n              path=\"/\"\n              element={ */}\n        <Textform\n          heading=\"Try Textutils - Word counter, Character counter, Lowercase to Uppercase converter, Uppercase to Lowercase converter, Extra spaces Remover\"\n          mode={mode}\n          showAlert={showAlert}\n        />\n        {/* } */}\n        {/* /> */}\n        {/* </Routes> */}\n      </div>\n      {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}